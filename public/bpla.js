const bplaNameSelect = document.getElementById('bplaName');
const controllerTypeSelect = document.getElementById('controllerType');
const resultDiv = document.getElementById('result');
const currentFilesDiv = document.getElementById('currentFiles');
const previousVersionsDiv = document.getElementById('previousVersions');



(async function checkAuth() {
  const res = await fetch('/api/auth/status');
  const data = await res.json();
  if (!data.loggedIn) {
    window.location.href = '/login.html'; // –ï—Å–ª–∏ –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    return;
  }
  
  // –ï—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ bpla.js, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –∑–∞–≥—Ä—É–∑–∫–∏
  if (document.getElementById('upload-section')) {
    const allowedRoles = ['–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–ù–∞—á–∞–ª—å–Ω–∏–∫ –æ—Ç–¥–µ–ª–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏—è', '–û—Ç–¥–µ–ª –∏—Å–ø—ã—Ç–∞–Ω–∏–π'];
    if (allowedRoles.includes(data.user.role)) {
      document.getElementById('upload-section').style.display = 'block';
    }
  }
})();
// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ë–ü–õ–ê –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async function loadBPLA() {
  try {
    const res = await fetch('/api/bpla');
    const bplas = await res.json();
    bplaNameSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ë–ü–õ–ê</option>';
    bplas.forEach(b => {
      const option = document.createElement('option');
      option.value = b.id;
      option.textContent = b.name;
      bplaNameSelect.appendChild(option);
    });
  } catch (err) {
    console.error(err);
    bplaNameSelect.innerHTML = '<option value="">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</option>';
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ë–ü–õ–ê
bplaNameSelect.addEventListener('change', async () => {
  const bplaId = bplaNameSelect.value;
  controllerTypeSelect.innerHTML = '<option value="">–ó–∞–≥—Ä—É–∑–∫–∞...</option>';

  if (!bplaId) return;

  try {
    const res = await fetch(`/api/bpla/${bplaId}/controllers`);
    const controllers = await res.json();
    controllerTypeSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä</option>';
    controllers.forEach(c => {
      const option = document.createElement('option');
      option.value = c.id;
      option.textContent = `${c.name} (${c.dump})`;
      controllerTypeSelect.appendChild(option);
    });
  } catch (err) {
    console.error(err);
    controllerTypeSelect.innerHTML = '<option value="">–û—à–∏–±–∫–∞</option>';
  }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
controllerTypeSelect.addEventListener('change', loadConfig);

async function loadConfig() {
  const controllerId = controllerTypeSelect.value;

  if (!controllerId) {
    resultDiv.style.display = 'none';
    return;
  }

  try {
    const res = await fetch(`/api/controller/${controllerId}/config`);
    const data = await res.json();

    if (!data.current_firmware || !data.current_dump) {
      alert('–ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞');
      resultDiv.style.display = 'none';
      return;
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    currentFilesDiv.innerHTML = `
      <div class="file-item">
        <span><strong>–ü—Ä–æ—à–∏–≤–∫–∞:</strong> ${data.current_firmware.file_path}</span>
        <a href="/firmwares/${data.current_firmware.file_path}" download>üíæ –°–∫–∞—á–∞—Ç—å</a>
      </div>
      <div class="file-item">
        <span><strong>–î–∞–º–ø:</strong> ${data.current_dump.file_path}</span>
        <a href="/dumps/${data.current_dump.file_path}" download>üíæ –°–∫–∞—á–∞—Ç—å</a>
      </div>
    `;

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–µ—Ä—Å–∏–∏
    if (data.previous_firmwares.length > 0 || data.previous_dumps.length > 0) {
      previousVersionsDiv.innerHTML = '';
      data.previous_firmwares.forEach(f => {
        const div = document.createElement('div');
        div.className = 'version-item';
        div.innerHTML = `
          ${new Date(f.uploaded_at).toLocaleString('ru-RU')} ‚Äî
          <strong>–ü—Ä–æ—à–∏–≤–∫–∞:</strong> ${f.file_path} ‚Äî
          <a href="/firmwares/${f.file_path}" download>–°–∫–∞—á–∞—Ç—å</a>
        `;
        previousVersionsDiv.appendChild(div);
      });
      data.previous_dumps.forEach(d => {
        const div = document.createElement('div');
        div.className = 'version-item';
        div.innerHTML = `
          ${new Date(d.uploaded_at).toLocaleString('ru-RU')} ‚Äî
          <strong>–î–∞–º–ø:</strong> ${d.file_path} ‚Äî
          <a href="/dumps/${d.file_path}" download>–°–∫–∞—á–∞—Ç—å</a>
        `;
        previousVersionsDiv.appendChild(div);
      });
      document.getElementById('versionsDetails').style.display = 'block';
    } else {
      document.getElementById('versionsDetails').style.display = 'none';
    }

    resultDiv.style.display = 'block';
  } catch (err) {
    console.error(err);
    alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
loadBPLA();