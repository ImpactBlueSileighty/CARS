document.addEventListener('DOMContentLoaded', () => {

  const bplaNameSelect = document.getElementById('bplaName');
  const controllerTypeSelect = document.getElementById('controllerType');
  const resultDiv = document.getElementById('result');
  const currentFilesDiv = document.getElementById('currentFiles');
  const previousVersionsDiv = document.getElementById('previousVersions');

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ë–ü–õ–ê –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  async function loadBPLA() {
    try {
      const res = await fetch('/api/bpla');
      const bplas = await res.json();

      // --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò ---
      // 1. –ù–∞—Ö–æ–¥–∏–º ID –≤—Å–µ—Ö –ë–ü–õ–ê, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö.
      const parentIds = new Set(
        bplas
          .map(b => b.parent_id)
          .filter(id => id !== null) // –£–±–∏—Ä–∞–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è
      );

      // 2. –ò–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —É–±–∏—Ä–∞–µ–º —Ç–µ, —á—å–∏ ID –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π.
      const filteredBplas = bplas.filter(b => !parentIds.has(b.id));
      // ---------------------------------

      bplaNameSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ë–ü–õ–ê</option>';
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ü–∏–π
      filteredBplas.forEach(b => {
        const option = document.createElement('option');
        option.value = b.id;
        option.textContent = b.name;
        bplaNameSelect.appendChild(option);
      });

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ë–ü–õ–ê:', err);
      bplaNameSelect.innerHTML = '<option value="">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</option>';
    }
  }
  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ë–ü–õ–ê
  bplaNameSelect.addEventListener('change', async () => {
    const bplaId = bplaNameSelect.value;
    controllerTypeSelect.innerHTML = '<option value="">–ó–∞–≥—Ä—É–∑–∫–∞...</option>';

    if (!bplaId) return;

    try {
      const res = await fetch(`/api/bpla/${bplaId}/controllers`);
      const controllers = await res.json();
      controllerTypeSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä</option>';
      controllers.forEach(c => {
        const option = document.createElement('option');
        option.value = c.id;
        option.textContent = `${c.name} (${c.dump})`;
        controllerTypeSelect.appendChild(option);
      });
    } catch (err) {
      console.error(err);
      controllerTypeSelect.innerHTML = '<option value="">–û—à–∏–±–∫–∞</option>';
    }
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
  controllerTypeSelect.addEventListener('change', loadConfig);

  async function loadConfig() {
    const controllerId = controllerTypeSelect.value;
    const bplaId = bplaNameSelect.value; // Get the selected BPLA ID

    if (!controllerId || !bplaId) { // Ensure both are selected
      resultDiv.style.display = 'none';
      return;
    }

    try {
      // Add bplaId as a query parameter to the URL
      const res = await fetch(`/api/controller/${controllerId}/config?bplaId=${bplaId}`);
      const data = await res.json();

      // The rest of your function remains the same...
      if (!data.current_firmware && !data.current_dump) {
        currentFilesDiv.innerHTML = `<p>–î–ª—è —ç—Ç–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ë–ü–õ–ê –∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.</p>`;
        document.getElementById('versionsDetails').style.display = 'none';
        resultDiv.style.display = 'block';
        return;
    }

      // –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
      currentFilesDiv.innerHTML = `
        <div class="file-item">
          <span><strong>–ü—Ä–æ—à–∏–≤–∫–∞:</strong> ${data.current_firmware.file_path}</span>
          <a href="/firmwares/${data.current_firmware.file_path}" download>üíæ –°–∫–∞—á–∞—Ç—å</a>
        </div>
        <div class="file-item">
          <span><strong>–î–∞–º–ø:</strong> ${data.current_dump.file_path}</span>
          <a href="/dumps/${data.current_dump.file_path}" download>üíæ –°–∫–∞—á–∞—Ç—å</a>
        </div>
      `;

      // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–µ—Ä—Å–∏–∏
      if (data.previous_firmwares.length > 0 || data.previous_dumps.length > 0) {
        previousVersionsDiv.innerHTML = '';
        data.previous_firmwares.forEach(f => {
          const div = document.createElement('div');
          div.className = 'version-item';
          div.innerHTML = `
            ${new Date(f.uploaded_at).toLocaleString('ru-RU')} ‚Äî
            <strong>–ü—Ä–æ—à–∏–≤–∫–∞:</strong> ${f.file_path} ‚Äî
            <a href="/firmwares/${f.file_path}" download>–°–∫–∞—á–∞—Ç—å</a>
          `;
          previousVersionsDiv.appendChild(div);
        });
        data.previous_dumps.forEach(d => {
          const div = document.createElement('div');
          div.className = 'version-item';
          div.innerHTML = `
            ${new Date(d.uploaded_at).toLocaleString('ru-RU')} ‚Äî
            <strong>–î–∞–º–ø:</strong> ${d.file_path} ‚Äî
            <a href="/dumps/${d.file_path}" download>–°–∫–∞—á–∞—Ç—å</a>
          `;
          previousVersionsDiv.appendChild(div);
        });
        document.getElementById('versionsDetails').style.display = 'block';
      } else {
        document.getElementById('versionsDetails').style.display = 'none';
      }

      resultDiv.style.display = 'block';
    } catch (err) {
      console.error(err);
      alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  loadBPLA();
});