document.addEventListener("DOMContentLoaded", () => {
    // --- 1. –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
    let currentBplaId = null;
    let currentConfig = { params: {} };
    let boardsData = [];
    let editBoardId = null;
    let allComponents = {};

    // --- 2. –≠–ª–µ–º–µ–Ω—Ç—ã DOM ---
    const bplaSelector = document.getElementById('bplaTypeSelector');
    const tableHead = document.querySelector('#electricalTable thead');
    const tableBody = document.querySelector('#electricalTable tbody');
    const form = document.getElementById('boardForm');
    const modal = document.getElementById('addModal');
    const closeModalBtn = document.getElementById('closeModalBtn');
    const filterForm = document.getElementById('filterForm');
    const modalParamsFieldset = document.getElementById('paramsFieldset');
    const modalPcContainer = document.getElementById('modalPcContainer');
    
    // –î–û–ë–ê–í–õ–ï–ù–û: –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    const tooltip = document.getElementById('commentTooltip');
    const commentModal = document.getElementById('commentModal');

    // --- 3. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API ---

    async function loadBplaTypes() {
        try {
            const res = await fetch('/api/bpla');
            const data = await res.json();
            const parentIds = new Set(data.map(b => b.parent_id).filter(id => id));
            const filtered = data.filter(b => !parentIds.has(b.id));
            bplaSelector.innerHTML = '';
            filtered.forEach(type => {
                bplaSelector.add(new Option(type.name, type.id));
            });
        } catch (e) { console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –ë–ü–õ–ê:", e); }
    }

    async function loadSuppliers() {
        try {
            const res = await fetch('/api/suppliers');
            const suppliers = await res.json();
            document.querySelectorAll('#supplierId, #supplierFilter').forEach(select => {
                const first = select.firstElementChild?.cloneNode(true) || new Option('–í—Å–µ', '');
                select.innerHTML = '';
                select.appendChild(first);
                suppliers.forEach(s => select.add(new Option(s.name, s.id)));
            });
        } catch(e) { console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:", e); }
    }
    
    const getFilters = () => {
        const filters = {
            bpla_id: currentBplaId,
            number: document.getElementById('numberFilter')?.value.trim(),
            supplier_id: document.getElementById('supplierFilter')?.value || null,
            status: document.getElementById('statusFilter')?.value || null
        };
        filterForm.querySelectorAll('.checkbox-group input[type="checkbox"]').forEach(checkbox => {
            const key = checkbox.id.replace('filter_', '');
            if (checkbox.checked) {
                filters[key] = true;
            }
        });
        return filters;
    };

    async function loadAndRenderTable() {
        if (!currentBplaId) return;
        try {
            const res = await fetch('/api/electrical/filter', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(getFilters())
            });
            if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏');
            boardsData = await res.json();
            renderTable(boardsData);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö (—ç–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂):', error);
            tableBody.innerHTML = `<tr><td colspan="10" style="text-align: center;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</td></tr>`;
        }
    }
    
    // --- 4. –§—É–Ω–∫—Ü–∏–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ UI ---

    function updateUiForBplaType() {
        let headersHtml = `<tr><th>–ù–æ–º–µ—Ä</th><th>–ü–æ—Å—Ç–∞–≤—â–∏–∫</th><th>–ü–ö</th>`;
        for (const key in currentConfig.params) { headersHtml += `<th>${currentConfig.params[key]}</th>`; }
        headersHtml += `<th>–î–µ–π—Å—Ç–≤–∏—è</th></tr>`;
        tableHead.innerHTML = headersHtml;

        let filterHtml = `
            <div class="primary-filters">
                <label>–ù–æ–º–µ—Ä –±–æ—Ä—Ç–∞: <input type="text" id="numberFilter" /></label>
                <label>–ü–æ—Å—Ç–∞–≤—â–∏–∫: <select id="supplierFilter"><option value="">–í—Å–µ</option></select></label>
                <label>–°—Ç–∞—Ç—É—Å:
                    <select id="statusFilter">
                        <option value="">–í—Å–µ</option>
                        <option value="in_progress">–í —Ä–∞–±–æ—Ç–µ</option>
                        <option value="finished">–ì–æ—Ç–æ–≤</option>
                        <option value="semifinished">–ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç</option>
                    </select>
                </label>
            </div>
            <fieldset class="checkbox-fieldset"><legend>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã</legend><div class="checkbox-group">`;
        for (const key in currentConfig.params) {
            if (key !== 'seal_number') { filterHtml += `<label><input type="checkbox" id="filter_${key}" /> ${currentConfig.params[key]}</label>`; }
        }
        filterHtml += `</div></fieldset><div class="filter-actions"><button type="button" id="resetFilterBtn">–°–±—Ä–æ—Å–∏—Ç—å</button></div>`;
        filterForm.innerHTML = filterHtml;
        loadSuppliers();
    }

    function renderTable(boards) {
        tableBody.innerHTML = '';
        if (!boards.length) {
            tableBody.innerHTML = `<tr><td colspan="10">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</td></tr>`;
            return;
        }
        boards.forEach(board => {
            const tr = document.createElement('tr');
            
            // –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º status_color –æ—Ç –±—ç–∫–µ–Ω–¥–∞ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
            if (board.status_color === 'red') tr.classList.add('is-semifinished');
            else if (board.status_color === 'green') tr.classList.add('is-finished');
            else tr.classList.add('is-in-progress'); // orange

            const params = board.electrical_params || {};
            let paramsHtml = `<td>${board.controller_name || 'N/A'}</td>`;
            for (const key in currentConfig.params) {
                const displayValue = key === 'seal_number' ? (params[key] || 'N/A') : findModelName(key, params[key]);
                const comment = board.electrical_comments ? board.electrical_comments[key] : null;
                paramsHtml += `
                    <td class="parameter-cell ${comment ? 'has-comment' : ''}" data-comment="${comment || ''}">
                        ${displayValue}
                        ${comment ? '<span class="comment-indicator">üí¨</span>' : ''}
                        <button class="edit-comment-btn" data-board-id="${board.id}" data-param-name="${key}" data-param-label="${currentConfig.params[key]}">‚úèÔ∏è</button>
                    </td>`;
            }
            tr.innerHTML = `<td>${board.number}</td><td>${board.supplier_name || 'N/A'}</td>${paramsHtml}<td class="actions-cell"><button onclick="window.editElectricalBoard(${board.id})">‚úèÔ∏è</button></td>`;
            tableBody.appendChild(tr);
        });
    }
    
    const findModelName = (paramKey, modelId) => {
        if (!modelId) return 'N/A';
        const componentMap = {
            telemetry_id: 'telemetry_modules', bec_id: 'bec_models', gps_id: 'gps_models',
            video_tx_id: 'video_transmitters', pvd_id: 'pvd_models'
        };
        const componentType = componentMap[paramKey];
        const model = allComponents[componentType]?.find(m => m.id == modelId);
        return model ? model.model_name : 'N/A';
    };

    // --- 5. –õ–æ–≥–∏–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ ---

    // –í–û–¢ –≠–¢–ê –§–£–ù–ö–¶–ò–Ø, –ö–û–¢–û–†–£–Æ –ù–ï –£–î–ê–õ–û–°–¨ –ù–ê–ô–¢–ò
    async function renderPcDropdown(bplaId, selectedControllerId = null) {
        modalPcContainer.innerHTML = '<p>–ó–∞–≥—Ä—É–∑–∫–∞ –ü–ö...</p>';
        try {
            const res = await fetch(`/api/bpla/${bplaId}/compatible-controllers`);
            if (!res.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ü–ö');
            const controllers = await res.json();
            let opts = '<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –ü–ö --</option>' + controllers.map(c => `<option value="${c.id}" ${selectedControllerId == c.id ? 'selected' : ''}>${c.name}</option>`).join('');
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–Ω—É—Ç —è—á–µ–π–∫–∞–º–∏ –≥—Ä–∏–¥–∞
            modalPcContainer.innerHTML = `
                <label for="param_controller_id">–ü–æ–ª–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä (–ü–ö):</label>
                <select id="param_controller_id" required>${opts}</select>
            `;
            // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ div.form-grid
            modalPcContainer.className = 'form-grid';

        } catch (e) {
            console.error(e);
            modalPcContainer.innerHTML = '<p style="color: red;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ü–ö</p>';
        }
    }

    // –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å —Ç–æ–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ label –∏ input/select
    function renderModalParams(config, components, savedParams = {}) {
        // –û—á–∏—â–∞–µ–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º legend
        modalParamsFieldset.innerHTML = '<legend>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã</legend>';
        if (!config || !config.params) return;

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–ª–∞—Å—Å–æ–º form-grid –≤–Ω—É—Ç—Ä–∏ fieldset
        const gridContainer = document.createElement('div');
        gridContainer.className = 'form-grid';
        
        const componentMap = {
            telemetry_id: 'telemetry_modules', bec_id: 'bec_models', gps_id: 'gps_models',
            video_tx_id: 'video_transmitters', pvd_id: 'pvd_models'
        };

        for (const key in config.params) {
            let labelHtml = `<label for="param_${key}">${config.params[key]}</label>`;
            let inputHtml = '';

            if (key === 'seal_number') {
                inputHtml = `<input type="text" id="param_seal_number" value="${savedParams.seal_number || ''}">`;
            } else {
                const componentType = componentMap[key];
                const options = components[componentType] || [];
                let opts = '<option value="">-- –ù–µ –≤—ã–±—Ä–∞–Ω–æ --</option>' + options.map(opt => `<option value="${opt.id}" ${savedParams[key] == opt.id ? 'selected' : ''}>${opt.model_name}</option>`).join('');
                inputHtml = `<select id="param_${key}">${opts}</select>`;
            }
            gridContainer.innerHTML += labelHtml + inputHtml;
        }
        modalParamsFieldset.appendChild(gridContainer);
    }

    // –ê –í–û–¢ –§–£–ù–ö–¶–ò–Ø, –ö–û–¢–û–†–ê–Ø –ï–ï –í–´–ó–´–í–ê–ï–¢
    window.editElectricalBoard = async (id) => {
        editBoardId = id;
        const board = boardsData.find(b => b.id === id);
        if (!board) return alert('–û—à–∏–±–∫–∞: –±–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');

        form.reset();
        document.getElementById('number').value = board.number || '';
        document.getElementById('supplierId').value = board.supplier_id || '';
        
        // –¢–∏–ø –ë–ü–õ–ê –≤ –º–æ–¥–∞–ª–∫–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –º—ã –µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º
        const bplaTypeDisplay = document.getElementById('bplaTypeDisplay');
        if(bplaTypeDisplay) bplaTypeDisplay.textContent = bplaSelector.options[bplaSelector.selectedIndex].text;


        modal.style.display = 'flex';

        try {
            const [configRes, componentsRes] = await Promise.all([
                fetch(`/api/bpla/${board.bpla_id}/electrical-config`),
                fetch(`/api/electrical/components/${board.bpla_id}`),
                renderPcDropdown(board.bpla_id, board.controller_id) // <--- –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò
            ]);

            const config = await configRes.json();
            const components = await componentsRes.json();
            renderModalParams(config, components, board.electrical_params || {});
        } catch (e) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", e);
            modalParamsFieldset.innerHTML = '<legend>–û—à–∏–±–∫–∞</legend><p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.</p>';
        }
    };

    // electrical.js

    async function onFormSubmit(e) {
        e.preventDefault();
        if (!editBoardId) return;

        const electrical_params = {};
        for (const key in currentConfig.params) {
            const input = document.getElementById(`param_${key}`);
            if (input) electrical_params[key] = input.value || null;
        }
        
        const body = {
            number: document.getElementById('number').value,
            supplier_id: document.getElementById('supplierId').value || null,
            controller_id: document.getElementById('param_controller_id').value || null,
            electrical_params
        };
        
        try {
            const response = await fetch(`/api/electrical/${editBoardId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(body)
            });
            if (!response.ok) {
                const errorData = await response.text();
                throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${errorData}`);
            }
            
            modal.style.display = 'none';
            editBoardId = null;
            await loadAndRenderTable();
        } catch (error) {
            alert(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: ${error.message}`);
        }
    }


    function initCommentEditor() {
        // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏ (tooltip) ---
        // (—ç—Ç–∞ —á–∞—Å—Ç—å –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        tableBody.addEventListener('mouseover', e => { 
            const cell = e.target.closest('.parameter-cell');
            if (cell && cell.dataset.comment) { 
                tooltip.textContent = cell.dataset.comment; 
                tooltip.style.display = 'block'; 
            } 
        }); 
        tableBody.addEventListener('mousemove', e => { 
            tooltip.style.left = `${e.pageX + 15}px`; 
            tooltip.style.top = `${e.pageY + 15}px`; 
        }); 
        tableBody.addEventListener('mouseout', () => { 
            tooltip.style.display = 'none'; 
        });

        // --- –õ–æ–≥–∏–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ ---
        let currentCommentData = {};
        
        tableBody.addEventListener('click', e => {
            if (e.target.classList.contains('edit-comment-btn')) {
                const button = e.target;
                const boardId = button.dataset.boardId;
                const board = boardsData.find(b => b.id == boardId);
                if (!board) return;

                currentCommentData = {
                    boardId: boardId,
                    paramName: button.dataset.paramName
                };

                document.getElementById('commentParamName').textContent = button.dataset.paramLabel;
                document.getElementById('commentTextarea').value = (board.electrical_comments && board.electrical_comments[button.dataset.paramName]) || '';
                
                // –û–ë–ù–û–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å–∞
                document.getElementById('semiFinishedSwitch').checked = (board.electrical_status === 'semifinished');
                
                commentModal.style.display = 'flex';
            }
        });

        const saveOrDeleteComment = async (isDelete = false) => {
            const { boardId, paramName } = currentCommentData;
            if (!boardId || !paramName) return;

            const commentText = isDelete ? '' : document.getElementById('commentTextarea').value;
            const isSemiFinished = document.getElementById('semiFinishedSwitch').checked;

            try {
                const response = await fetch(`/api/workshop/${boardId}/comment`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        department: 'electrical',
                        parameter: paramName,
                        comment: commentText,
                        is_semi_finished: isSemiFinished
                    })
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${errorText}`);
                }
                commentModal.style.display = 'none';
                await loadAndRenderTable();
            } catch (error) {
                alert(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –î–µ—Ç–∞–ª–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ (F12).`);
            }
        };
        
        document.getElementById('closeCommentModal').onclick = () => commentModal.style.display = 'none';
        document.getElementById('saveCommentBtn').onclick = () => saveOrDeleteComment(false);
        document.getElementById('deleteCommentBtn').onclick = () => saveOrDeleteComment(true);
    }

    // --- 7. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
    async function init() {
        await Promise.all([loadBplaTypes(), loadSuppliers()]);
        bplaSelector.addEventListener('change', onBplaTypeChange);
        if (bplaSelector.options.length > 0) {
            await onBplaTypeChange();
        }
        
        // –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê –ü–û–õ–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –§–ò–õ–¨–¢–†–ê
        const debounce = (func, delay = 350) => {
            let timeout;
            return (...args) => {
                clearTimeout(timeout);
                timeout = setTimeout(() => {
                    func.apply(this, args);
                }, delay);
            };
        };
        const debouncedFilter = debounce(loadAndRenderTable);

        filterForm.addEventListener('input', e => {
            if (e.target.matches('#numberFilter')) {
                debouncedFilter();
            }
        });

        filterForm.addEventListener('change', e => {
            if (e.target.matches('#supplierFilter, #statusFilter, .checkbox-group input')) {
                loadAndRenderTable();
            }
        });

        filterForm.addEventListener('click', e => {
            if (e.target.id === 'resetFilterBtn') {
                filterForm.reset();
                loadAndRenderTable();
            }
        });
        
        const handleCloseModal = () => {
            modal.style.display = 'none';
            editBoardId = null;
        };
        closeModalBtn.addEventListener('click', handleCloseModal);
        window.addEventListener('click', (event) => {
            if (event.target === modal) handleCloseModal();
        });
        form.addEventListener('submit', onFormSubmit);
        initCommentEditor();
    }

    async function onBplaTypeChange() {
        currentBplaId = bplaSelector.value;
        if (!currentBplaId) return;
        try {
            const res = await fetch(`/api/bpla/${currentBplaId}/electrical-config`);
            if (!res.ok) throw new Error('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            currentConfig = await res.json();
            updateUiForBplaType();
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞ –ë–ü–õ–ê
            await loadAllComponentsForCurrentBpla();
            await loadAndRenderTable();
        } catch (error) {
            console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:", error);
            tableHead.innerHTML = '';
            tableBody.innerHTML = `<tr><td colspan="3">–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</td></tr>`;
        }
    }

    // –ù–æ–≤–∞—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    async function loadAllComponentsForCurrentBpla() {
        if (!currentBplaId) return;
        try {
            const res = await fetch(`/api/electrical/components/${currentBplaId}`);
            if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
            allComponents = await res.json();
        } catch (e) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:", e);
        }
    }

    init();
});